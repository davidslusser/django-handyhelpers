import sys
import environ
import os
import django
from django.apps import apps
from django.test import TestCase
from model_bakery import baker
sys.path.append(str(environ.Path(__file__) - 3))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
django.setup()

{% for model, options in model_dict.items() %}
class {{model.__name__}}Tests(TestCase):
    """ test CRUD operations on {{ model.__name__ }} """
    def setUp(self):
        self.model = apps.get_model('{{ model._meta.app_label }}', '{{ model._meta.model_name }}')
        self.to_bake = '{{model._meta.label}}'
        self.field_to_update = 'name'

    def test_create(self):
        """ verify object can be created """
        before_count = self.model.objects.count()
        row = baker.make(self.to_bake{% if options['fill_optional'] %}, _fill_optional={{ options['fill_optional'] }}{% endif %})
        after_count = self.model.objects.count()
        self.assertTrue(isinstance(row, self.model))
        self.assertGreater(after_count, before_count)

    def test_read(self):
        """ verify object can be read """
        row = baker.make(self.to_bake{% if options['fill_optional'] %}, _fill_optional={{ options['fill_optional'] }}{% endif %})
        entry = self.model.objects.get(id=row.id)
        self.assertTrue(isinstance(entry, self.model))
        self.assertEqual(row.id, entry.id)

    def test_update(self):
        """ verify object can be updated """
        row = baker.make(self.to_bake{% if options['fill_optional'] %}, _fill_optional={{ options['fill_optional'] }}{% endif %})
        updated = 'updated value'
        setattr(row, self.field_to_update, updated)
        row.save()
        self.assertEqual(getattr(row, self.field_to_update), updated)

    def test_delete(self):
        """ verify object can be deleted """
        row = baker.make(self.to_bake{% if options['fill_optional'] %}, _fill_optional={{ options['fill_optional'] }}{% endif %})
        before_count = self.model.objects.count()
        row_id = row.id
        row.delete()
        after_count = self.model.objects.count()
        with self.assertRaises(self.model.DoesNotExist):
            self.model.objects.get(id=row_id)
        self.assertLess(after_count, before_count)

{% endfor -%}